import PushNotification, { PushNotificationScheduledLocalObject, PushNotificationScheduleObject } from "react-native-push-notification"
import { simpleTimeFormat } from "../logic/date-helpers"

export async function scheduleSessionReminderNotification(sessionTime: number, reminderOffsetMinutes: number) {
  const sessionTimeStr = simpleTimeFormat(new Date(sessionTime))
  const notificationScheduleTime = sessionTime - (1000 * 60 * reminderOffsetMinutes)
  console.log('scheduling: ', sessionTime)
  return PushNotification.localNotificationSchedule({
    channelId: "UnofficialFocusmateAppNotificationChannel", // (required) channelId, if the channel doesn't exist, notification will not trigger.
    showWhen: true, // (optional) default: true
    autoCancel: true, // (optional) default: true
    largeIcon: "ic_launcher", // (optional) default: "ic_launcher". Use "" for no large icon.
    smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
    bigText: `You have a session at ${sessionTimeStr}. Get there early for bonus points!`, // (optional) default: "message" prop
    subText: "Upcoming session", // (optional) default: none
    bigLargeIcon: "ic_launcher", // (optional) default: undefined
    color: "blue", // (optional) default: system default
    vibrate: true, // (optional) default: true
    vibration: 1000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    // tag: "some_tag", // (optional) add tag to message // WARNING 
    //group: "group", // (optional) add group to message
    //groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
    ongoing: false, // (optional) set whether this is an "ongoing" notification
    //priority: "high", // (optional) set notification priority, default: high
    visibility: "private", // (optional) set notification visibility, default: private
    ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
    shortcutId: "shortcut-id", // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
    onlyAlertOnce: false, // (optional) alert will open only once with sound and notify, default: false
    
    when: null, // (optional) Add a timestamp (Unix timestamp value in milliseconds) pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
    usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
    timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null
  
    messageId: "google:message_id", // (optional) added as `message_id` to intent extras so opening push notification can find data stored by @react-native-firebase/messaging module. 
  
    //actions: ["Yes", "No"], // (Android only) See the doc for notification actions to know more
    invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
  
    //id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    title: `Focusmate in ${reminderOffsetMinutes} minutes!`, // (optional)
    message: `You have a session at ${sessionTimeStr}. Get there early for bonus points!`, // (required)
    userInfo: { sessionTime, reminderOffsetMinutes }, // (optional) default: {} (using null throws a JSON value '<null>' error)
    playSound: true, // (optional) default: true
    soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  
    date: new Date(notificationScheduleTime),
    allowWhileIdle: true
  })
}

export async function getScheduledNotifications(): Promise<PushNotificationScheduledLocalObject[]> {
  return new Promise((resolve, reject) => {
    try {
    PushNotification.getScheduledLocalNotifications(notifications => {
      resolve(notifications)
    })
    } catch (e) {
      reject(e)
    }
  })
}

export function unscheduleAllNotifications() {
  PushNotification.cancelAllLocalNotifications()
}